Ch 2
JS uses camel case
in REPL no need to console log a var to print it
once you declare a var with var = blah, reassignment doesn’t need any var declaration

Ch 3 : Types
types of types: primitive are built-in and immutable, objects are created and can change
primitive types: boolean, null, undefined, number, string
strings are immutable but can be concatenated 

Ch4 : Objects
objects are mutable, just a collection of properties (ex. string object has a length by definition)
if try to get length of a number, get undefined
(6).length so interp not think 6. 
declare objects with {}, so var imAnObject = {}
check type with typeof, so typeof imAnObject;

Ch5 : Arrays
arrays are lists that are called arrays
var groceries = [‘blah’, ‘blahblah’]
in JS, arrays are still objects — everything that wasn’t a primitive is an object
special properties: groceries[0]; will return item at index zero
groceries[groceries.length - 1]; will give last element in array
good for ordered lists

Ch6 : Functions
return statement in function used to return a value from invocation
if don’t care about the value but just the “side effects” of the function, no need to return
if no return statement, returns “undefined”
notice the scope of the function in hello world file

Ch7 : Operators
expression can be multiple lines if assignment to variable and only has one semicolon
can include query parameters in the URL with apiURL + ‘?lon’ + coordinate.longitude
query params aren’t like vars in that you need to use the params that are expected
if you have coordinate.longitude, good is object and long is property of that object
3+5 = 8
‘3’+’5’= 35

Ch8 : Requests and Servers
make requests to servers and get responses
first resolves URL to IP address (address of a computer where the data you want is stored)
your IP address is included in your request and this is where the data is sent
our makeRequest function does this
URL for weather site is it’s first argument
once data comes back, calls another function (passed as argument) <— since called at a later time, is called a callback function and handles the weather data it eventually gets

looking it up : you may want to know exactly how it physically works, but that’s a distraction from what you are trying to do (make the damned thing work)

Ch9 : Classes and Objects
keyword “new” creates an object so for example “new XMLHttpRequest();” <— this is constructor method and XMLHttpRequest is the constructor function
also creates an object: var pelage = {}
think var peleg = new Object();
check type with typeof <thing>; and will return whatever it is
guess what class a given thing is paired with with <thing> instanceof <class>; will return true or false

asynchronous programming : AJAX is request to a server that’s being done in the background without stopping the computer from doing anything else
JS is inherently asynchronous because it is mainly used in the browser to interact with elements on the page and some of that is out of interpreter’s control so need to not block other things
until recently, each tab only had one thread for processing so if JS blocked it while getting data from server, can’t to any JS on page until done
this means our code can’t be written linearly because sometimes we have to wait on an IO operation before you can complete your next thing
JS is used for iPhone apps, editors, web servers
inspect vars by typing them into your Console and see properties and methods

debugging : type each function into the console and try different arguments, use debugger statement console, use console.log (like Python’s print) often, use Firefox’s Network tab for debugging HTTP requests (type request into console and invoke with URL)
debugger statement: 
var add = function (num1, num2) {
  debugger;
  return num1 + num2;
}
invoke with (for example) add(3, 6)
can use to access values for function arguments
to go back to execution of function, press play icon



